#!/bin/sh

# Commands
DATE="$(command -vp date)"

# Global variables
NEEDED_PROGRAMS="awk dd fdisk fold head kpartx sfdisk rsync tr"
PROG_NAME="$(basename "${0}")"
DIR_NAME="$(dirname "${0}")"
VERSION=""
VERSION_BASE=""
OUTPUT_IMG=""
FILE_FLASH_INIT="${DIR_NAME}/files/flash.init"
FILE_WRITE_FIRMWARE="${DIR_NAME}/files/write-firmware"
FILE_WRITE_U_BOOT="${DIR_NAME}/files/write-u-boot"
UBOOT_IMAGE="u-boot-with-spl.imx"
UBOOT_IMAGE_URL="https://images.solidsense.io/SolidSense/.create-usb-image/${UBOOT_IMAGE}"
UBOOT_IMX6_SPL="spl-imx6-sdhc.bin"
UBOOT_IMX6_SPL_URL="https://images.solid-run.com/IMX6/U-Boot/${UBOOT_IMX6_SPL}"
UBOOT_IMX6_IMG="u-boot-imx6-sdhc.img"
UBOOT_IMX6_IMG_URL="https://images.solid-run.com/IMX6/U-Boot/${UBOOT_IMX6_IMG}"
UBOOT_IMAGE_IN6="u-boot-with-spl-in6g.imx"
UBOOT_IMAGE_IN6_URL="https://images.solidsense.io/SolidSense/.create-usb-image/${UBOOT_IMAGE_IN6}"
WIC_TYPE="n6gsdl"
HARDWARE="n6gq n6gsdl"
TYPE="n6g"
MOUNT_DIR1="/mnt/rootfs1"
MOUNT_DIR2="/mnt/rootfs2"
FLASH_DIR="${MOUNT_DIR1}/flash"
EXTLINUX_CONF_FILE="${MOUNT_DIR1}/boot/extlinux/extlinux.conf"

# Pretty print
NC="\\e[0m"
RED="\\e[31m"

# functions
usage () {
	printf "%s <VERSION>\\n" "${PROG_NAME}"
	printf "    -h|--hardware                        : hardware (in6g|n6g)"
	printf "\\n\\n"
	printf "\\texample: %s Solidsense-V0.01-2019060600\\n" "${PROG_NAME}"
	exit 1
}

check_needed_programs () {
	EXIT=0

	for prog in ${NEEDED_PROGRAMS}; do
		if [ -z "$(command -vp "${prog}")" ] ; then
			echo "Please install: ${prog}"
			EXIT=1
		fi
	done

	if [ ${EXIT} -eq 1 ]; then
		exit 1
	fi
}

calc_duration () {
	time_start="${1}"
	time_end="${2}"

	echo $((time_end-time_start)) | awk '{printf("%02d:%02d:%02d\n", int($1/3600), int($1/60%60), int($1%60))}'
}

check_file () {
	file="${1}"
	if [ ! -f "${file}" ]; then
		printf "file not found: ${RED}%s${NC}\\n" "${file}" 1>&2
		echo 0
	fi
}

check_files () {
	UBOOT_IMAGE="${UBOOT_IMAGE}.${TYPE}"
	UBOOT_IMAGE_URL="${UBOOT_IMAGE_URL}.${TYPE}"
	WIC_IMAGE="${VERSION}/${WIC_TYPE}-core-image-minimal-${VERSION_BASE}.wic"
	failed=""
	failed=$(check_file "${UBOOT_IMAGE}")
	failed=$(check_file "${UBOOT_IMAGE_IN6}")
	failed=$(check_file "${UBOOT_IMX6_SPL}")
	failed=$(check_file "${UBOOT_IMX6_IMG}")
	failed=$(check_file "${WIC_IMAGE}")
	if [ ! -f "${UBOOT_IMAGE}" ]; then
		echo "Downloading ${UBOOT_IMAGE} from ${UBOOT_IMAGE_URL}"
		wget "${UBOOT_IMAGE_URL}" > /dev/null 2>&1
	fi
	if [ ! -f "${UBOOT_IMAGE_IN6}" ]; then
		echo "Downloading ${UBOOT_IMAGE_IN6} from ${UBOOT_IMAGE_IN6_URL}"
		wget "${UBOOT_IMAGE_IN6_URL}" > /dev/null 2>&1
	fi
	if [ ! -f "${UBOOT_IMX6_SPL}" ]; then
		echo "Downloading ${UBOOT_IMX6_SPL} from ${UBOOT_IMX6_SPL_URL}"
		wget "${UBOOT_IMX6_SPL_URL}" > /dev/null 2>&1
	fi
	if [ ! -f "${UBOOT_IMX6_IMG}" ]; then
		echo "Downloading ${UBOOT_IMX6_IMG} from ${UBOOT_IMX6_IMG_URL}"
		wget "${UBOOT_IMX6_IMG_URL}" > /dev/null 2>&1
	fi
	for device in ${HARDWARE}; do
		file="${VERSION}/${device}-core-image-minimal-${VERSION_BASE}.tar.gz"
		failed=$(check_file "${file}")
	done

	if [ "${failed}" ]; then
		exit 1
	fi
}

create_image_file () {
	# Create the image file
	dd if=/dev/zero of="${OUTPUT_IMG}" bs=1G count=0 seek=1 >/dev/null 2>&1

	# Partition the disk
	label_id="$(tr -dc 'a-h0-9' < /dev/urandom | fold -w 8 | head -n 1)"
	if [ "${#label_id}" -ne 8 ]; then
		echo "Unable to create valid label_id: ${label_id}"
		exit 1
	fi
	sudo sfdisk --quiet --force "${OUTPUT_IMG}" << END
label: dos
label-id: ${label_id}
device: ${OUTPUT_IMG}
unit: sectors

${OUTPUT_IMG} : start=        2048, size=     2029568, type=83
${OUTPUT_IMG} : start=     2031616, size=       65536, type=83
END
	ret="${?}"
	if [ "${ret}" -ne 0 ]; then
		printf "Partitioning of ${RED}%s${NC} failed via sfdisk: ${RED}%s${NC}\\n" "${OUTPUT_IMG}" "${ret}"
		exit "${ret}"
	fi

	# loop mount image file
	sudo kpartx -av "${OUTPUT_IMG}" >/dev/null 2>&1

	# mkfs
	sudo mkfs.ext4 -F -L "${VERSION_BASE}" /dev/mapper/loop0p1 >/dev/null 2>&1
	sudo mkfs.ext4 -F -L "overlay" /dev/mapper/loop0p2 >/dev/null 2>&1

	# write u-boot
	if [ "${TYPE}" = "n6g" ]; then
		dd if="${UBOOT_IMX6_SPL}" of="${OUTPUT_IMG}" bs=1k seek=1 conv=sync,notrunc,nocreat > /dev/null 2>&1
		dd if="${UBOOT_IMX6_IMG}" of="${OUTPUT_IMG}" bs=1k seek=69 conv=sync,notrunc,nocreat > /dev/null 2>&1
	else
		dd if="${UBOOT_IMAGE_IN6}" of="${OUTPUT_IMG}" bs=1k seek=1 conv=sync,notrunc,nocreat > /dev/null 2>&1
	fi

	# mount filesystem
	if [ ! -d "${MOUNT_DIR1}" ] ; then
		sudo mkdir -p "${MOUNT_DIR1}"
	fi
	sudo mount /dev/mapper/loop0p1 "${MOUNT_DIR1}"
}

mount_src_image () {
	# loop mount image file
	sudo kpartx -av "${WIC_IMAGE}" >/dev/null 2>&1

	# mount filesystem
	if [ ! -d "${MOUNT_DIR2}" ]; then
		sudo mkdir -p "${MOUNT_DIR2}"
	fi
	sudo mount /dev/mapper/loop1p1 "${MOUNT_DIR2}"
}

copy_files () {
	fstab_tmp="$(mktemp /tmp/fstab.XXXXXX)"
	flash_tmp="$(mktemp /tmp/flash.XXXXXX)"
	# rsync over files from source wic image
	sudo rsync -av --quiet "${MOUNT_DIR2}/" "${MOUNT_DIR1}"

	# create flash dir
	if [ ! -d "${FLASH_DIR}" ]; then
		sudo mkdir -p "${FLASH_DIR}"
	fi

	# copy over u-boot files
	sudo cp "${UBOOT_IMAGE}" "${MOUNT_DIR1}/flash/u-boot-with-spl.imx"

	# copy over image files
	for device in ${HARDWARE}; do
		file="${VERSION}/${device}-core-image-minimal-${VERSION_BASE}.tar.gz"
		sudo cp "${file}" "${FLASH_DIR}"
	done

	# copy over scripts
	sudo cp "${FILE_FLASH_INIT}" "${MOUNT_DIR1}/etc/init.d/flash"
	sudo cp "${FILE_WRITE_U_BOOT}" "${MOUNT_DIR1}/flash"
	sudo cp "${FILE_WRITE_FIRMWARE}" "${MOUNT_DIR1}/flash"

	# copy over extlinux.conf
	sudo mkdir -p "${MOUNT_DIR1}/boot/extlinux"
	sudo cp "${VERSION}/extlinux.conf" "${MOUNT_DIR1}/boot/extlinux/extlinux.conf"

	# update /etc/fstab
	cat > "${fstab_tmp}" << EOF
/dev/root		/		ext4		defaults					1 1
proc			/proc		proc		defaults					0 0
sysfs			/sys		sysfs		rw,nosuid,nodev,noexec,relatime			0 0
devpts			/dev/pts	devpts		rw,nosuid,noexec,relatime,mode=0620,gid=5	0 0
tmpfs			/run		tmpfs		mode=0755,nodev,nosuid,strictatime		0 0
tmpfs			/var/volatile	tmpfs		defaults					0 0
tmpfs			/dev/shm	tmpfs		defaults					0 0
EOF
	sudo cp "${fstab_tmp}" "${MOUNT_DIR1}/etc/fstab"
	rm "${fstab_tmp}"

	# create /etc/systemd/system/flash.service
	cat > "${flash_tmp}" << EOF
[Unit]
Description=Flash the eMMC
After=rngd.service systemd-user-sessions.service
Before=getty.target serial-getty@ttymxc0.service
[Service]
Type=oneshot
User=root
Group=root
ExecStart=/etc/init.d/flash
TimeoutStartSec=450
[Install]
WantedBy=multi-user.target
EOF
	sudo cp "${flash_tmp}" "${MOUNT_DIR1}/etc/systemd/system/flash.service"
	rm "${flash_tmp}"

	# create softlink for service file
	sudo ln -sf "../flash.service" "${MOUNT_DIR1}/etc/systemd/system/multi-user.target.wants/flash.service"

	# copy over DTB files
	sudo cp "${VERSION}"/*dtb "${MOUNT_DIR1}/boot"
}

update_extlinux_conf () {
	tmpfile="$(mktemp /tmp/extlinux.conf.XXXXXX)"
	# determine partuuid
	for a in /dev/disk/by-partuuid/* ; do
		if file "${a}" | grep -q "dm-0"; then
			partuuid="$(basename "${a}")"
		fi
	done
	sed "s/\${uuid}/${partuuid}/" < "${EXTLINUX_CONF_FILE}" > "${tmpfile}"
	sudo cp "${tmpfile}" "${EXTLINUX_CONF_FILE}"
	rm "${tmpfile}"
}

umount_cleanup () {
	# sync filesystem
	sudo sync

	# umount
	sudo umount "${MOUNT_DIR1}" "${MOUNT_DIR2}"

	# remove loop mounts
	sudo kpartx -dv "${OUTPUT_IMG}" >/dev/null 2>&1
	sudo kpartx -dv "${WIC_IMAGE}" >/dev/null 2>&1
}

# main
options=$(getopt -l "help,hardware:" -o ":hH:" -- "${@}")
eval set -- "${options}"

while true
do
        case ${1} in
                -h|--help )
                        usage
                        ;;
                -H|--hardware )
			shift
			TYPE="${1}"
			if [ "${TYPE}" = "in6g" ] ; then
				HARDWARE="in6gq in6gsdl"
				WIC_TYPE="in6gsdl"
			elif [ "${TYPE}" = "n6g" ] ; then
				HARDWARE="n6gq n6gsdl"
				WIC_TYPE="n6gsdl"
			else
				echo "Unknown hardware type"
				exit 1
			fi
                        ;;
                \? )
                        usage
                        ;;
                : )
                        echo "Invalid option: ${OPTARG} requires an argument" 1>&2
                        ;;
                -- )
                        shift
                        break
                        ;;
                * )
                        usage
                        ;;
        esac
        shift
done


if [ "${#}" -ne "1" ]; then
	usage
else
	START="$(${DATE} +%s)"
	VERSION="$(echo "${1}" | sed s'/\/$//')"
	VERSION_BASE="$(basename "${1}")"
	OUTPUT_IMG="${VERSION}-${TYPE}.img"
	if [ -f "${OUTPUT_IMG}" ]; then
		echo "Output image: ${OUTPUT_IMG} exists, removing."
		rm "${OUTPUT_IMG}"
	fi
	echo "Starting to create image <${OUTPUT_IMG}>"
	check_files
	create_image_file
	mount_src_image
	copy_files
	update_extlinux_conf
	umount_cleanup
	END="$(${DATE} +%s)"
	duration="$(calc_duration "${START}" "${END}")"
	echo "SUCCESS! (${duration})"
fi
