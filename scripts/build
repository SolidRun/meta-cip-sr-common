#!/bin/sh

# Commands
DATE="$(command -vp date)"

# Global variables
PROG_NAME="$(basename "${0}")"
HARDWARE_ALL=" \
	n6gq \
	n6gsdl \
	solidsense \
"
IMAGE_SUFFIX=" \
	manifest \
	mender \
	mender.bmap \
	tar.gz \
"
DEVICES="${HARDWARE_ALL}"
PRODUCT="Solidsense"
RELEASE="dev"
RELEASE_DATE="$("${DATE}" "+%Y%m%d")"
ITERATION="00"
MENDER_ARTIFACT="/home/eric/bin/mender-artifact"
MENDER_PRIVATE_KEY_FILE="/home/eric/work.kingcheese/Solidrun/solidsense/signing-private-keys/private.key"
MENDER_PUBLIC_KEY_FILE="/home/eric/work.kingcheese/Solidrun/solidsense/signing-private-keys/public.key"

# Pretty print
NC="\\e[0m"
BOLD="\\e[1m"
#BLINK="\\e[5m"
UNDERLINED="\\e[4m"
RED="\\e[31m"
YELLOW="\\e[33m"
LIGHT_RED="\\e[91m"
LIGHT_GREEN="\\e[92m"

# functions
usage () {
	echo "${PROG_NAME}:"
	echo "    -H|--hardware <hardware type>                 :default is <all>"
	echo "    -p|--product <product>                        :default is <Solidsense>"
	echo "    -r|--release <release version>                :default is <dev>"
	echo "    -d|--date <date>                              :default is <$("${DATE}" "+%Y%m%d")>"
	echo "    -i|--iteration <iteration>                    :default is <00>"
	echo "    -c|--customer <customer>                      :default is no specific customer"
	echo "    -h|--help"
	echo ""
	exit 1
}

find_customer () {
	cust="${1}"
	case "${cust}" in
		maersk )
			echo "M"
			;;
		test )
			echo "T"
			;;
		* )
			echo ""
			;;
	esac
}

calc_duration () {
	time_start="${1}"
	time_end="${2}"

	echo $((time_end-time_start)) | awk '{printf("%02d:%02d:%02d\n", int($1/3600), int($1/60%60), int($1%60))}'
}

do_build () {
	if [ ! -d "deploy/logs/${VERSION}" ]; then
		mkdir -p "deploy/logs/${VERSION}"
	fi
	printf "\\nBuilding version ${LIGHT_GREEN}%s${NC}\\n" "${VERSION}"
	for device in ${DEVICES}; do
		START="$(${DATE} +%s)"
		log="deploy/logs/${VERSION}/build-${device}-$(${DATE} +%Y%m%d-%H:%M)"
		# Build using KAS
		printf "    ${LIGHT_RED}%s${NC} logging to ${BOLD}%s${NC}" \
			"${device}" \
			"${log}"
		if [ -n "${CUSTOMER}" ] && [ "${CUSTOMER}" = "maersk" ]; then
			main_yml="kas-solidsense-maersk.yml"
		else
			main_yml="kas-solidsense.yml"
		fi
		device_yml="meta-cip-sr-${device}/kas-${device}.yml"
		MENDER_ARTIFACT_NAME="${VERSION}" kas build "${main_yml}":"${device_yml}" > "${log}" 2>&1
		ret="${?}"
		END="$(${DATE} +%s)"
		duration="$(calc_duration "${START}" "${END}")"
		if [ "${ret}" -eq "1" ] ; then
			printf " ${YELLOW}(%s)${NC} Error!: (%s)\\n" "${duration}" "${ret}"
		else
			printf " ${YELLOW}(%s)${NC}\\n" "${duration}"
		fi
	done
	printf "\\n"
}

do_update_manifest () {
	MANIFEST_FILE="${1}"
	LICENSE_DIR="${2}"

	while read -r pkg rest ; do
		case "${pkg}" in
			kernel-* )
					echo "${pkg} ${rest} <GPL>"
				;;
			*-dev )
				license_pkg="$(echo "$pkg" | sed 's/-dev//')"
				if [ -d "${LICENSE_DIR}/${license_pkg}" ] ; then
					RECIPE_INFO="${LICENSE_DIR}/${license_pkg}/recipeinfo"
					license="$(awk '/LICENSE/ {gsub("LICENSE: ", ""); print}' < "${RECIPE_INFO}")"
					echo "${pkg} ${rest} <${license}>"
				else
					echo "${pkg} ${rest} UNKNOWN"
				fi
				;;
			*-*-* )
				if [ -d "${LICENSE_DIR}/${pkg}" ] ; then
					RECIPE_INFO="${LICENSE_DIR}/${pkg}/recipeinfo"
					license="$(awk '/LICENSE/ {gsub("LICENSE: ", ""); print}' < "${RECIPE_INFO}")"
					echo "${pkg} ${rest} <${license}>"
				else
					license_pkg="$(echo "${pkg}" | awk '{gsub("-", " "); print $1"-"$2}')"
					if [ -d "${LICENSE_DIR}/${license_pkg}" ] ; then
						RECIPE_INFO="${LICENSE_DIR}/${license_pkg}/recipeinfo"
						license="$(awk '/LICENSE/ {gsub("LICENSE: ", ""); print}' < "${RECIPE_INFO}")"
						echo "${pkg} ${rest} <${license}>"
					else
						license_pkg="$(echo "${pkg}" | awk '{gsub("-", " "); print $1}')"
						if [ -d "${LICENSE_DIR}/${license_pkg}" ] ; then
							RECIPE_INFO="${LICENSE_DIR}/${license_pkg}/recipeinfo"
							license="$(awk '/LICENSE/ {gsub("LICENSE: ", ""); print}' < "${RECIPE_INFO}")"
							echo "${pkg} ${rest} <${license}>"
						else
							echo "${pkg} ${rest} UNKNOWN"
						fi
					fi
				fi
				;;
			*-* )
				if [ -d "${LICENSE_DIR}/${pkg}" ] ; then
					RECIPE_INFO="${LICENSE_DIR}/${pkg}/recipeinfo"
					license="$(awk '/LICENSE/ {gsub("LICENSE: ", ""); print}' < "${RECIPE_INFO}")"
					echo "${pkg} ${rest} <${license}>"
				else
					license_pkg="$(echo "${pkg}" | awk '{gsub("-", " "); print $1}')"
					if [ -d "${LICENSE_DIR}/${license_pkg}" ] ; then
						RECIPE_INFO="${LICENSE_DIR}/${license_pkg}/recipeinfo"
						license="$(awk '/LICENSE/ {gsub("LICENSE: ", ""); print}' < "${RECIPE_INFO}")"
						echo "${pkg} ${rest} <${license}>"
					else
						echo "${pkg} ${rest} UNKNOWN"
					fi
				fi
				;;
			* )
				if [ -d "${LICENSE_DIR}/${pkg}" ] ; then
					RECIPE_INFO="${LICENSE_DIR}/${pkg}/recipeinfo"
					license="$(awk '/LICENSE/ {gsub("LICENSE: ", ""); print}' < "${RECIPE_INFO}")"
					echo "${pkg} ${rest} <${license}>"
				else
					echo "${pkg} ${rest} UNKNOWN"
				fi
				;;
		esac
	done < "${MANIFEST_FILE}"
}

do_deploy_images () {
	dir_deploy="deploy/${VERSION}"

	if [ ! -d "${dir_deploy}" ]; then
		mkdir -p "${dir_deploy}"
	fi

	printf "Copying over images for${LIGHT_RED}%s${NC}\\n"

	# Copy over the licenses
	START="$(${DATE} +%s)"
	printf "    ${RED}%s${NC}" "licenses"
	rsync -avz build/tmp/deploy/licenses "${dir_deploy}" > /dev/null 2>&1
	END="$(${DATE} +%s)"
	duration="$(calc_duration "${START}" "${END}")"
	printf " ${YELLOW}(%s)${NC}\\n" "${duration}"

	for device in ${DEVICES}; do
		image_prefix_src="build/tmp/deploy/images/${device}/core-image-minimal-${device}"
		image_prefix_dst="${dir_deploy}/${device}-core-image-minimal-${VERSION}"

		if [ ! -d "${dir_deploy}" ]; then
			mkdir -p "${dir_deploy}"
		fi

		# Copy over images
		printf "    ${RED}%s${NC}" "${device}"
		START="$(${DATE} +%s)"
		for suffix in ${IMAGE_SUFFIX}; do
			if [ -f "${image_prefix_src}.${suffix}" ]; then
				cp "${image_prefix_src}.${suffix}" "${image_prefix_dst}.${suffix}"
			else
				printf "\\n\\n${RED}Error: ${NC} %s not found!" "${image_prefix_src}.${suffix}"
				exit 1
			fi
		done

		# Update manifest file
		do_update_manifest "${image_prefix_src}.manifest" "${dir_deploy}/licenses" > "${image_prefix_dst}.manifest.lic"

		END="$(${DATE} +%s)"
		duration="$(calc_duration "${START}" "${END}")"
		printf " ${YELLOW}(%s)${NC}\\n" "${duration}"
	done

	printf "\\n"
}

do_deploy_sign_artifact () {
	if [ ! -d "deploy/${VERSION}" ]; then
		mkdir -p "deploy/${VERSION}"
	fi
	printf "Signing and verifying artifact for${LIGHT_RED}%s${NC}\\n"
	for device in ${DEVICES}; do
		dir_deploy="deploy/${VERSION}"
		mender_artifact="${dir_deploy}/${device}-core-image-minimal-${VERSION}.mender"

		if [ ! -d "${dir_deploy}" ]; then
			mkdir -p "${dir_deploy}"
		fi

		# Sign and verify artifacts
		printf "    ${RED}%s${NC}" "${device}"
		START="$(${DATE} +%s)"
		${MENDER_ARTIFACT} sign --key "${MENDER_PRIVATE_KEY_FILE}" "${mender_artifact}"
		${MENDER_ARTIFACT} validate --key "${MENDER_PUBLIC_KEY_FILE}" "${mender_artifact}" > /dev/null 2>&1
		END="$(${DATE} +%s)"
		duration="$(calc_duration "${START}" "${END}")"
		printf " ${YELLOW}(%s)${NC}\\n" "${duration}"
	done
}

# main

options=$(getopt -l "help,hardware:,product:,release:,date:,iteration:,customer:" -o "hH:p:r:d:i:c:" -- "${@}")
eval set -- "${options}"

while true
do
	case "${1}" in
		-h|--help )
			usage
			;;
		-H|--hardware )
			shift
			if [ "${1}" = "all" ]; then
				DEVICES="${HARDWARE_ALL}"
			else
				DEVICES=$(echo "${1}" | sed 's/,/ /g')
			fi
			;;
		-p|--product )
			shift
			PRODUCT="${1}"
			;;
		-r|--release )
			shift
			RELEASE="${1}"
			;;
		-d|--date )
			shift
			RELEASE_DATE="${1}"
			;;
		-i|--iteration )
			shift
			ITERATION="$(printf "%02d" "${1}")"
			;;
		-c|--customer )
			shift
			CUSTOMER="${1}"
			CUSTOMER_VER="$(find_customer "${1}")"
			;;
		\? )
			usage
			;;
		: )
			echo "Invalid option: ${OPTARG} requires an argument" 1>&2
			;;
		-- )
			shift
			break
			;;
		* )
			usage
			;;
	esac
	shift
done

if [ "${#}" -ne "0" ]; then
	usage
else
	if [ ! -d "meta-cip-sr-common" ]; then
		echo "Cannot find meta-cip-sr-common"
		exit 1
	fi
	FULL_START="$(${DATE} +%s)"
	if [ -n "${CUSTOMER_VER}" ] ; then
		VERSION="${PRODUCT}-${CUSTOMER_VER}${RELEASE}-${RELEASE_DATE}${ITERATION}"
	else
		VERSION="${PRODUCT}-${RELEASE}-${RELEASE_DATE}${ITERATION}"
	fi
	do_build
	do_deploy_images
	do_deploy_sign_artifact
	FULL_END="$(${DATE} +%s)"
	duration="$(calc_duration "${FULL_START}" "${FULL_END}")"
	printf "That entire run took ${BOLD}${UNDERLINED}%s${NC}.\\n\\n" "${duration}"
fi
